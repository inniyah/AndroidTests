Index: nanogui-21e5cbc880b2e26b28b2a35085a9e6706da1e2a8/CMakeLists.txt
===================================================================
--- nanogui-21e5cbc880b2e26b28b2a35085a9e6706da1e2a8.orig/CMakeLists.txt
+++ nanogui-21e5cbc880b2e26b28b2a35085a9e6706da1e2a8/CMakeLists.txt
@@ -1,6 +1,13 @@
 cmake_minimum_required (VERSION 2.8.12)
-
 project(nanogui)
+SET(VERSION 0.0)
+
+INCLUDE(GNUInstallDirs)
+
+FIND_PACKAGE(PkgConfig REQUIRED)
+
+PKG_CHECK_MODULES(NANOVG_PKG REQUIRED IMPORTED_TARGET nanovg)
+PKG_CHECK_MODULES(GLFW3_PKG REQUIRED IMPORTED_TARGET glfw3 gl glu glew)
 
 if (POLICY CMP0058)
   cmake_policy(SET CMP0058 NEW) # Ninja requires custom command byproducts to be explicit.
@@ -9,12 +16,6 @@ if (POLICY CMP0068)
   cmake_policy(SET CMP0068 NEW) # RPATH settings on macOS don't affect install_name.
 endif()
 
-if (NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw/src")
-  message(FATAL_ERROR "The NanoGUI dependency repositories (GLFW, etc.) are missing! "
-    "You probably did not clone the project with --recursive. It is possible to recover "
-    "by calling \"git submodule update --init --recursive\"")
-endif()
-
 if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
   message(STATUS "Setting build type to 'Release' as none was specified.")
   set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
@@ -36,7 +37,7 @@ endif()
 
 set(NANOGUI_BUILD_SHARED_DEFAULT ON)
 set(NANOGUI_BUILD_PYTHON_DEFAULT ON)
-set(NANOGUI_BUILD_GLFW_DEFAULT ON)
+set(NANOGUI_BUILD_GLFW_DEFAULT OFF)
 
 if (CMAKE_CXX_COMPILER MATCHES "/em\\+\\+(-[a-zA-Z0-9.])?$")
   set(CMAKE_CXX_COMPILER_ID "Emscripten")
@@ -386,7 +387,8 @@ endif()
 
 include_directories(
   ${NANOGUI_ENOKI_DIR}/include
-  ext/nanovg/src
+  ${NANOVG_PKG_INCLUDE_DIRS}
+  ${GLFW3_PKG_INCLUDE_DIRS}
   include
   ${CMAKE_CURRENT_BINARY_DIR}
 )
@@ -461,9 +463,6 @@ add_definitions(${NANOGUI_EXTRA_DEFS})
 
 # Compile main NanoGUI library
 add_library(nanogui-obj OBJECT
-  # Merge NanoVG into the NanoGUI library
-  ext/nanovg/src/nanovg.c
-  ext/nanovg/src/stb_image.h
   # Merge GLAD into the NanoGUI library (only if needed)
   ${LIBNANOGUI_EXTRA_SOURCE}
   # Fonts etc.
@@ -525,6 +524,7 @@ add_library(nanogui ${NANOGUI_LIBRARY_TY
 
 if (NANOGUI_BUILD_SHARED)
   set_property(TARGET nanogui-obj PROPERTY POSITION_INDEPENDENT_CODE ON)
+  set_target_properties(nanogui PROPERTIES VERSION 0.0 SOVERSION 0)
 endif()
 
 # Compile/link flags for NanoGUI
@@ -535,18 +535,20 @@ if (NANOGUI_BUILD_GLAD AND NANOGUI_BUILD
     "GLAD_GLAPI_EXPORT;GLAD_GLAPI_EXPORT_BUILD")
 endif()
 
+add_compile_options(${NANOVG_PKG_CFLAGS_OTHER} ${GLFW3_PKG_CFLAGS_OTHER})
+
 if (NANOGUI_BUILD_SHARED)
-  target_link_libraries(nanogui PRIVATE ${NANOGUI_EXTRA_LIBS})
+  target_link_libraries(nanogui PRIVATE ${NANOGUI_EXTRA_LIBS} ${NANOVG_PKG_LIBRARIES} ${GLFW3_PKG_LIBRARIES})
 else()
-  target_link_libraries(nanogui PUBLIC ${NANOGUI_EXTRA_LIBS})
+  target_link_libraries(nanogui PUBLIC ${NANOGUI_EXTRA_LIBS} ${NANOVG_PKG_LIBRARIES} ${GLFW3_PKG_LIBRARIES})
 endif()
 
 if (NANOGUI_INSTALL)
   install(TARGETS nanogui
-          LIBRARY DESTINATION lib
-          ARCHIVE DESTINATION lib)
+          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
-  install(DIRECTORY include/nanogui DESTINATION include
+  install(DIRECTORY include/nanogui DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
           FILES_MATCHING PATTERN "*.h")
 endif()
 
@@ -581,12 +583,17 @@ if (NANOGUI_BUILD_EXAMPLES)
   add_executable(example4      src/example4.cpp)
   add_executable(example_icons src/example_icons.cpp)
 
-  target_link_libraries(example1      nanogui)
+  target_link_libraries(example1      nanogui ${GLFW3_PKG_LIBRARIES})
   target_link_libraries(example2      nanogui)
-  target_link_libraries(example3      nanogui ${opengl_library})
-  target_link_libraries(example4      nanogui)
+  target_link_libraries(example3      nanogui ${GLFW3_PKG_LIBRARIES})
+  target_link_libraries(example4      nanogui ${GLFW3_PKG_LIBRARIES})
   target_link_libraries(example_icons nanogui)
 
+  target_compile_definitions(example1 PRIVATE STB_IMAGE_IMPLEMENTATION NANOGUI_USE_OPENGL)
+  target_compile_definitions(example2 PRIVATE NANOGUI_USE_OPENGL)
+  target_compile_definitions(example3 PRIVATE NANOGUI_USE_OPENGL)
+  target_compile_definitions(example4 PRIVATE NANOGUI_USE_OPENGL)
+
   # Copy icons for example application
   file(COPY resources/icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
 endif()
