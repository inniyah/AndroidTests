Index: nanogui/CMakeLists.txt
===================================================================
--- nanogui.orig/CMakeLists.txt
+++ nanogui/CMakeLists.txt
@@ -9,12 +9,6 @@ if (POLICY CMP0068)
   cmake_policy(SET CMP0068 NEW) # RPATH settings on macOS don't affect install_name.
 endif()
 
-if (NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw/src")
-  message(FATAL_ERROR "The NanoGUI dependency repositories (GLFW, etc.) are missing! "
-    "You probably did not clone the project with --recursive. It is possible to recover "
-    "by calling \"git submodule update --init --recursive\"")
-endif()
-
 if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
   message(STATUS "Setting build type to 'Release' as none was specified.")
   set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
@@ -118,7 +112,7 @@ if (EXISTS /opt/vc/include)
 endif()
 
 include(CheckCXXCompilerFlag)
-include(CheckCXXSourceRuns)
+#~ include(CheckCXXSourceRuns)
 
 if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
   message(STATUS "Setting build type to 'Release' as none was specified.")
@@ -132,7 +126,7 @@ macro(CHECK_CXX_COMPILER_AND_LINKER_FLAG
   set(CMAKE_REQUIRED_FLAGS ${_CXX_FLAGS})
   set(CMAKE_REQUIRED_LIBRARIES ${_LINKER_FLAGS})
   set(CMAKE_REQUIRED_QUIET TRUE)
-  check_cxx_source_runs("#include <iostream>\nint main(int argc, char **argv) { std::cout << \"test\"; return 0; }" ${_RESULT})
+  #~ check_cxx_source_runs("#include <iostream>\nint main(int argc, char **argv) { std::cout << \"test\"; return 0; }" ${_RESULT})
   set(CMAKE_REQUIRED_FLAGS "")
   set(CMAKE_REQUIRED_LIBRARIES "")
 endmacro()
@@ -386,7 +380,6 @@ endif()
 
 include_directories(
   ${NANOGUI_ENOKI_DIR}/include
-  ext/nanovg/src
   include
   ${CMAKE_CURRENT_BINARY_DIR}
 )
@@ -461,9 +454,6 @@ add_definitions(${NANOGUI_EXTRA_DEFS})
 
 # Compile main NanoGUI library
 add_library(nanogui-obj OBJECT
-  # Merge NanoVG into the NanoGUI library
-  ext/nanovg/src/nanovg.c
-  ext/nanovg/src/stb_image.h
   # Merge GLAD into the NanoGUI library (only if needed)
   ${LIBNANOGUI_EXTRA_SOURCE}
   # Fonts etc.
Index: nanogui/src/screen.cpp
===================================================================
--- nanogui.orig/src/screen.cpp
+++ nanogui/src/screen.cpp
@@ -47,12 +47,16 @@
 #  if defined(NANOGUI_USE_OPENGL)
 #    define NANOVG_GL3_IMPLEMENTATION
 #  elif defined(NANOGUI_USE_GLES)
-#    define NANOVG_GLES2_IMPLEMENTATION
+#    if NANOGUI_GLES_VERSION == 2
+#      define NANOVG_GLES2_IMPLEMENTATION
+#    elif NANOGUI_GLES_VERSION == 3
+#      define NANOVG_GLES3_IMPLEMENTATION
+#    endif
 #  endif
-#  include <nanovg_gl.h>
+#  include <nanovg/nanovg_gl.h>
 #  include "opengl_check.h"
 #elif defined(NANOGUI_USE_METAL)
-#  include <nanovg_mtl.h>
+#  include <nanovg/nanovg_mtl.h>
 #endif
 
 #if defined(__APPLE__)
@@ -495,7 +499,11 @@ void Screen::initialize(GLFWwindow *wind
 #if defined(NANOGUI_USE_OPENGL)
     m_nvg_context = nvgCreateGL3(flags);
 #elif defined(NANOGUI_USE_GLES)
+#  if NANOGUI_GLES_VERSION == 2
     m_nvg_context = nvgCreateGLES2(flags);
+#  elif NANOGUI_GLES_VERSION == 3
+    m_nvg_context = nvgCreateGLES3(flags);
+#  endif
 #elif defined(NANOGUI_USE_METAL)
     void *nswin = glfwGetCocoaWindow(window);
     metal_window_init(nswin, m_float_buffer);
@@ -537,7 +545,11 @@ Screen::~Screen() {
 #if defined(NANOGUI_USE_OPENGL)
         nvgDeleteGL3(m_nvg_context);
 #elif defined(NANOGUI_USE_GLES)
+#  if NANOGUI_GLES_VERSION == 2
         nvgDeleteGLES2(m_nvg_context);
+#  elif NANOGUI_GLES_VERSION == 3
+        nvgDeleteGLES3(m_nvg_context);
+#  endif
 #elif defined(NANOGUI_USE_METAL)
         nvgDeleteMTL(m_nvg_context);
 #endif
Index: nanogui/include/nanogui/opengl.h
===================================================================
--- nanogui.orig/include/nanogui/opengl.h
+++ nanogui/include/nanogui/opengl.h
@@ -45,11 +45,11 @@
 #  if NANOGUI_GLES_VERSION == 2
 #    include <GLES2/gl2ext.h>
 #  elif NANOGUI_GLES_VERSION == 3
-#    include <GLES3/gl2ext.h>
+#    include <GLES3/gl31.h>
 #  endif
 #endif
 
-#include <nanovg.h>
+#include <nanovg/nanovg.h>
 
 // Special treatment of linux Nvidia opengl headers
 #if !defined(_WIN32) && !defined(__APPLE__) && defined(NANOGUI_USE_OPENGL)
