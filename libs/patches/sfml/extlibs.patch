Index: sfml/src/SFML/Audio/CMakeLists.txt
===================================================================
--- sfml.orig/src/SFML/Audio/CMakeLists.txt
+++ sfml/src/SFML/Audio/CMakeLists.txt
@@ -66,20 +66,20 @@ elseif(SFML_OS_ANDROID)
 endif()
 
 # find external libraries
-sfml_find_package(OpenAL INCLUDE "OPENAL_INCLUDE_DIR" LINK "OPENAL_LIBRARY")
-sfml_find_package(Vorbis INCLUDE "VORBIS_INCLUDE_DIRS" LINK "VORBIS_LIBRARIES")
-sfml_find_package(FLAC INCLUDE "FLAC_INCLUDE_DIR" LINK "FLAC_LIBRARY")
+#~ sfml_find_package(OpenAL INCLUDE "OPENAL_INCLUDE_DIR" LINK "OPENAL_LIBRARY")
+#~ sfml_find_package(Vorbis INCLUDE "VORBIS_INCLUDE_DIRS" LINK "VORBIS_LIBRARIES")
+#~ sfml_find_package(FLAC INCLUDE "FLAC_INCLUDE_DIR" LINK "FLAC_LIBRARY")
 
 # avoids warnings in vorbisfile.h
-target_compile_definitions(Vorbis INTERFACE "OV_EXCLUDE_STATIC_CALLBACKS")
-target_compile_definitions(FLAC INTERFACE "FLAC__NO_DLL")
+#~ target_compile_definitions(Vorbis INTERFACE "OV_EXCLUDE_STATIC_CALLBACKS")
+#~ target_compile_definitions(FLAC INTERFACE "FLAC__NO_DLL")
 
 # define the sfml-audio target
 sfml_add_library(sfml-audio
                  SOURCES ${SRC} ${CODECS_SRC})
 
 # setup dependencies
-target_link_libraries(sfml-audio PRIVATE OpenAL)
+target_link_libraries(sfml-audio PRIVATE openal)
 
 if(SFML_OS_ANDROID)
     target_link_libraries(sfml-audio PRIVATE android OpenSLES)
@@ -87,4 +87,4 @@ endif()
 
 target_link_libraries(sfml-audio
                       PUBLIC sfml-system
-                      PRIVATE Vorbis FLAC)
+                      PRIVATE FLAC vorbisfile vorbisenc vorbis ogg)
Index: sfml/src/SFML/Graphics/CMakeLists.txt
===================================================================
--- sfml.orig/src/SFML/Graphics/CMakeLists.txt
+++ sfml/src/SFML/Graphics/CMakeLists.txt
@@ -134,8 +134,8 @@ if(SFML_OS_ANDROID)
     target_link_libraries(sfml-graphics PRIVATE z EGL GLESv1_CM)
 endif()
 
-sfml_find_package(Freetype INCLUDE "FREETYPE_INCLUDE_DIRS" LINK "FREETYPE_LIBRARY")
-target_link_libraries(sfml-graphics PRIVATE Freetype)
+#~ sfml_find_package(Freetype INCLUDE "FREETYPE_INCLUDE_DIRS" LINK "FREETYPE_LIBRARY")
+target_link_libraries(sfml-graphics PRIVATE freetype png16 harfbuzz)
 
 # add preprocessor symbols
 target_compile_definitions(sfml-graphics PRIVATE "STBI_FAILURE_USERMSG")
Index: sfml/CMakeLists.txt
===================================================================
--- sfml.orig/CMakeLists.txt
+++ sfml/CMakeLists.txt
@@ -498,14 +498,14 @@ elseif(SFML_OS_IOS)
 
 elseif(SFML_OS_ANDROID)
 
-    if(NOT SFML_USE_SYSTEM_DEPS)
-        # install extlibs
-        install(DIRECTORY extlibs/libs-android/${CMAKE_ANDROID_ARCH_ABI} DESTINATION extlibs/lib)
-        install(FILES extlibs/Android.mk DESTINATION extlibs)
-    endif()
+    #~ if(NOT SFML_USE_SYSTEM_DEPS)
+    #~     # install extlibs
+    #~     install(DIRECTORY extlibs/libs-android/${CMAKE_ANDROID_ARCH_ABI} DESTINATION extlibs/lib)
+    #~     install(FILES extlibs/Android.mk DESTINATION extlibs)
+    #~ endif()
 
-    # install Android.mk so the NDK knows how to set up SFML
-    install(FILES src/SFML/Android.mk DESTINATION .)
+    #~ # install Android.mk so the NDK knows how to set up SFML
+    #~ install(FILES src/SFML/Android.mk DESTINATION .)
 
 endif()
 
